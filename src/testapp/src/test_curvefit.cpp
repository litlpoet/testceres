#include <gtest/gtest.h>

#include <ceres/ceres.h>
#include <glog/logging.h>

const int    kNumObservations = 67;
const double data[]           = {
    0.000000e+00, 1.133898e+00,  // 1
    7.500000e-02, 1.334902e+00,  // 2
    1.500000e-01, 1.213546e+00,  // 3
    2.250000e-01, 1.252016e+00,  // 4
    3.000000e-01, 1.392265e+00,  // 5
    3.750000e-01, 1.314458e+00,  // 6
    4.500000e-01, 1.472541e+00,  // 7
    5.250000e-01, 1.536218e+00,  // 8
    6.000000e-01, 1.355679e+00,  // 9
    6.750000e-01, 1.463566e+00,  // 10
    7.500000e-01, 1.490201e+00,  // 11
    8.250000e-01, 1.658699e+00,  // 12
    9.000000e-01, 1.067574e+00,  // 13
    9.750000e-01, 1.464629e+00,  // 14
    1.050000e+00, 1.402653e+00,  // 15
    1.125000e+00, 1.713141e+00,  // 16
    1.200000e+00, 1.527021e+00,  // 17
    1.275000e+00, 1.702632e+00,  // 18
    1.350000e+00, 1.423899e+00,  // 19
    1.425000e+00, 1.543078e+00,  // 20
    1.500000e+00, 1.664015e+00,  // 21
    1.575000e+00, 1.732484e+00,  // 22
    1.650000e+00, 1.543296e+00,  // 23
    1.725000e+00, 1.959523e+00,  // 24
    1.800000e+00, 1.685132e+00,  // 25
    1.875000e+00, 1.951791e+00,  // 26
    1.950000e+00, 2.095346e+00,  // 27
    2.025000e+00, 2.361460e+00,  // 28
    2.100000e+00, 2.169119e+00,  // 29
    2.175000e+00, 2.061745e+00,  // 30
    2.250000e+00, 2.178641e+00,  // 31
    2.325000e+00, 2.104346e+00,  // 32
    2.400000e+00, 2.584470e+00,  // 33
    2.475000e+00, 1.914158e+00,  // 34
    2.550000e+00, 2.368375e+00,  // 35
    2.625000e+00, 2.686125e+00,  // 36
    2.700000e+00, 2.712395e+00,  // 37
    2.775000e+00, 2.499511e+00,  // 38
    2.850000e+00, 2.558897e+00,  // 39
    2.925000e+00, 2.309154e+00,  // 40
    3.000000e+00, 2.869503e+00,  // 41
    3.075000e+00, 3.116645e+00,  // 42
    3.150000e+00, 3.094907e+00,  // 43
    3.225000e+00, 2.471759e+00,  // 44
    3.300000e+00, 3.017131e+00,  // 45
    3.375000e+00, 3.232381e+00,  // 46
    3.450000e+00, 2.944596e+00,  // 47
    3.525000e+00, 3.385343e+00,  // 48
    3.600000e+00, 3.199826e+00,  // 49
    3.675000e+00, 3.423039e+00,  // 50
    3.750000e+00, 3.621552e+00,  // 51
    3.825000e+00, 3.559255e+00,  // 52
    3.900000e+00, 3.530713e+00,  // 53
    3.975000e+00, 3.561766e+00,  // 54
    4.050000e+00, 3.544574e+00,  // 55
    4.125000e+00, 3.867945e+00,  // 56
    4.200000e+00, 4.049776e+00,  // 57
    4.275000e+00, 3.885601e+00,  // 58
    4.350000e+00, 4.110505e+00,  // 59
    4.425000e+00, 4.345320e+00,  // 60
    4.500000e+00, 4.161241e+00,  // 61
    4.575000e+00, 4.363407e+00,  // 62
    4.650000e+00, 4.161576e+00,  // 63
    4.725000e+00, 4.619728e+00,  // 64
    4.800000e+00, 4.737410e+00,  // 65
    4.875000e+00, 4.727863e+00,  // 66
    4.950000e+00, 4.669206e+00   // 67
};

struct ExponentialResidual
{
  ExponentialResidual(double x, double y)
      : _x(x)
      , _y(y)
  {
  }

  template<typename T>
  bool
  operator()(T const* const m, T const* const c, T* residual) const
  {
    residual[0] = T(_y) - exp(m[0] * T(_x) + c[0]);
    return true;
  }

 private:
  double const _x;
  double const _y;
};

TEST(TestCurveFit, CurveFit)
{
  double m = 0.0;
  double c = 0.0;

  ceres::Problem problem;
  for (auto i = 0; i < kNumObservations; ++i)
  {
    auto cost_f = new ceres::AutoDiffCostFunction<ExponentialResidual, 1, 1, 1>(
        new ExponentialResidual(data[2 * i], data[2 * i + 1]));
    problem.AddResidualBlock(cost_f, nullptr, &m, &c);
  }

  ceres::Solver::Options options;
  options.max_num_iterations           = 25;
  options.linear_solver_type           = ceres::DENSE_QR;
  options.minimizer_progress_to_stdout = true;

  ceres::Solver::Summary summary;
  ceres::Solve(options, &problem, &summary);

  std::cout << summary.BriefReport() << std::endl;
  std::cout << "Initial params : m -> " << 0.0 << " c-> " << 0.0 << std::endl;
  std::cout << "Final   params : m -> " << m << " c-> " << c << std::endl;
}
